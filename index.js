// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  var Pool, debug, isFunction,
    slice = [].slice;

  debug = require('debug')('rethinkdb:pool');

  Pool = require('generic-pool').Pool;

  isFunction = function(f) {
    return typeof f === 'function';
  };

  module.exports = function(options) {
    var Promise, k, opts, pool, run, v;
    if (options == null) {
      options = {};
    }
    opts = {};
    for (k in options) {
      v = options[k];
      if (k !== 'max' && k !== 'min' && k !== 'idleTimeoutMillis' && k !== 'log') {
        opts[k] = v;
      }
    }
    pool = Pool({
      name: 'rethinkdb',
      create: function(done) {
        return options.r.connect(opts, done);
      },
      destroy: function(connection) {
        return connection.close();
      },
      log: options.log || debug,
      max: options.max || 10,
      min: options.min || 2,
      idleTimeoutMillis: options.idleTimeoutMillis || 30 * 1000
    });
    run = pool.pooled(function() {
      var args, connection, done, i, query;
      connection = arguments[0], query = arguments[1], args = 4 <= arguments.length ? slice.call(arguments, 2, i = arguments.length - 1) : (i = 2, []), done = arguments[i++];
      debug('querying');
      args.unshift(connection);
      args.push(done);
      return query.run.apply(query, args);
    });
    Promise = options.Promise || global.Promise;
    pool.run = function(query, opt, done) {
      var args, promise;
      args = [query];
      if (isFunction(opt)) {
        done = opt;
        opt = null;
      }
      if (opt != null) {
        args.push(opt);
      }
      promise = new Promise(function(resolve, reject) {
        args.push(function(error, cursorOrResult) {
          debug('resolving');
          if (error != null) {
            return reject(error);
          } else {
            return resolve((cursorOrResult != null ? typeof cursorOrResult.toArray === "function" ? cursorOrResult.toArray() : void 0 : void 0) || cursorOrResult);
          }
        });
        return run.apply(pool, args);
      });
      if (done != null) {
        return promise.then(function(d) {
          return done(null, d);
        })["catch"](done);
      } else {
        return promise;
      }
    };
    return pool;
  };

}).call(this);
